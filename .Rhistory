library(viridis)
library(RColorBrewer)
library(gridExtra)
library(reshape2)
# Define datasets and their corresponding gRNA libraries
datasets <- list(
"GWAS" = list(
file = "E:/ASAP/scRNASeq/PerturbSeq/final/all_GWAS.rds",
library = "G5O13",
folder = "GWAS_library_only"
),
"FPD" = list(
file = "E:/ASAP/scRNASeq/PerturbSeq/final/all_FPD.rds",
library = "G5O11",
folder = "FPD_library_only"
),
"CRISPRi" = list(
file = "E:/ASAP/scRNASeq/PerturbSeq/final/all_CRISPRi.rds",
library = c("G5O13", "G5O11"),  # Both libraries
folder = "both_gRNA_libraries"
)
)
# Define cluster resolutions
cluster_types <- list(
"coarse" = "seurat_clusters",
"fine" = "seurat_clusters_fine"
)
# Process each dataset and cluster resolution
for(dataset_name in names(datasets)) {
dataset_info <- datasets[[dataset_name]]
# Read the dataset
print(paste("\n===== Processing", dataset_name, "dataset ====="))
# Check if file exists
if(!file.exists(dataset_info$file)) {
print(paste("Error: File not found:", dataset_info$file))
next
}
seurat_obj <- readRDS(dataset_info$file)
# Extract metadata from Seurat object
x2 <- seurat_obj@meta.data
# Check available columns
print(paste("Dataset", dataset_name, "has", ncol(x2), "columns"))
print(paste("Sample column names:", paste(head(colnames(x2), 10), collapse = ", ")))
# Filter by gRNA library
if(length(dataset_info$library) > 1) {
# For CRISPRi, use both libraries
x2 <- subset(x2, gRNA_library %in% dataset_info$library)
} else {
x2 <- subset(x2, gRNA_library == dataset_info$library)
}
print(paste("After filtering: Dataset has", nrow(x2), "rows"))
for(cluster_type in names(cluster_types)) {
print(paste("\n--- Processing", cluster_type, "clusters ---"))
# For coarse clusters, do both all clusters and main clusters only
if(cluster_type == "coarse") {
cluster_subsets <- list(
"all_clusters_considered" = NULL,  # NULL means use all clusters
"main_clusters_only" = c("0", "1", "2")  # Only these clusters
)
} else {
# For fine clusters, only do all clusters
cluster_subsets <- list(
"all_clusters_considered" = NULL
)
}
for(subset_name in names(cluster_subsets)) {
print(paste("\n--- Processing", cluster_type, "clusters -", subset_name, "---"))
# Set up output directory
if(cluster_type == "coarse") {
pdf_dir <- file.path(dataset_info$folder, paste0(cluster_type, "_clusters"), subset_name)
} else {
pdf_dir <- file.path(dataset_info$folder, paste0(cluster_type, "_clusters"))
}
if(!dir.exists(pdf_dir)) {
dir.create(pdf_dir, recursive = TRUE)
}
# Create the contingency table using appropriate cluster column
cluster_column <- cluster_types[[cluster_type]]
# Check if the cluster column exists
if(!(cluster_column %in% colnames(x2))) {
print(paste("Warning: Cluster column", cluster_column, "not found in dataset", dataset_name))
print(paste("Available columns:", paste(colnames(x2), collapse = ", ")))
next
}
# Apply cluster subset filtering if specified
x2_filtered <- x2
if(!is.null(cluster_subsets[[subset_name]])) {
# Filter to only specified clusters
clusters_to_keep <- cluster_subsets[[subset_name]]
x2_filtered <- x2_filtered[x2_filtered[[cluster_column]] %in% clusters_to_keep, ]
print(paste("Filtered to clusters:", paste(clusters_to_keep, collapse = ", ")))
print(paste("Remaining cells:", nrow(x2_filtered)))
}
# Ensure we're extracting vectors, not data frames, and handle NAs
cluster_values <- as.character(x2_filtered[[cluster_column]])
gene_values <- as.character(x2_filtered$scMAGeCK_gene_assignment)
# Check lengths match
if(length(cluster_values) != length(gene_values)) {
print(paste("Error: Length mismatch - clusters:", length(cluster_values), "genes:", length(gene_values)))
next
}
# Remove rows with NA values to ensure table creation works
valid_rows <- !is.na(cluster_values) & !is.na(gene_values)
cluster_values <- cluster_values[valid_rows]
gene_values <- gene_values[valid_rows]
print(paste("Creating table with", length(cluster_values), "cells"))
contingency_table <- table(cluster_values, gene_values)
# Get clusters with sufficient Non-Targeting controls
non_targeting_counts <- contingency_table[, "Non-Targeting"]
clusters_with_sufficient_controls <- names(non_targeting_counts)[non_targeting_counts > 5]
# Get all genes meeting criteria
all_genes <- c()
for(cluster in clusters_with_sufficient_controls) {
cluster_counts <- contingency_table[cluster, ]
sufficient_genes <- names(cluster_counts)[cluster_counts > 5]
all_genes <- unique(c(all_genes, sufficient_genes))
}
print(paste("Total genes meeting criteria:", length(all_genes)))
print(paste("Total clusters with >5 Non-Targeting:", length(clusters_with_sufficient_controls)))
# Create the full matrix
full_heatmap_matrix <- contingency_table[clusters_with_sufficient_controls, all_genes]
full_heatmap_matrix <- as.matrix(t(full_heatmap_matrix))
# Calculate the expected distribution based on Non-Targeting
non_targeting_distribution <- full_heatmap_matrix["Non-Targeting", ]
non_targeting_proportions <- non_targeting_distribution / sum(non_targeting_distribution)
# SCALING APPROACH 1: Log2 Observed/Expected ratio
scaled_matrix_ratio <- full_heatmap_matrix
for(i in 1:nrow(full_heatmap_matrix)) {
gene_total <- sum(full_heatmap_matrix[i, ])
expected_counts <- gene_total * non_targeting_proportions
scaled_matrix_ratio[i, ] <- log2((full_heatmap_matrix[i, ] + 1) / (expected_counts + 1))
}
# SCALING APPROACH 2: Z-score
scaled_matrix_zscore <- full_heatmap_matrix
for(i in 1:nrow(full_heatmap_matrix)) {
gene_total <- sum(full_heatmap_matrix[i, ])
expected_counts <- gene_total * non_targeting_proportions
expected_sd <- sqrt(expected_counts)
scaled_matrix_zscore[i, ] <- (full_heatmap_matrix[i, ] - expected_counts) / (expected_sd + 1)
}
# Create annotations with separate perturbation cell count scale
perturbation_cell_counts <- rowSums(full_heatmap_matrix)
# Create separate annotation for perturbations (excluding Non-Targeting)
perturbation_counts_for_scale <- perturbation_cell_counts
perturbation_counts_for_scale[names(perturbation_counts_for_scale) == "Non-Targeting"] <- NA
row_annotation <- data.frame(
Gene_Type = ifelse(rownames(full_heatmap_matrix) == "Non-Targeting",
"Control",
"Perturbation"),
Cluster_Cells = rowSums(full_heatmap_matrix),  # For cluster comparison
Perturbation_N = perturbation_counts_for_scale,  # For perturbation comparison (Non-Targeting = NA)
row.names = rownames(full_heatmap_matrix)
)
col_annotation <- data.frame(
Total_Cells = rowSums(contingency_table[clusters_with_sufficient_controls, ]),
NonTargeting_Percent = round(100 * non_targeting_proportions, 1),
row.names = clusters_with_sufficient_controls
)
# Get the maximum perturbation count (excluding Non-Targeting) for scaling
max_perturbation_count <- max(perturbation_counts_for_scale, na.rm = TRUE)
ann_colors <- list(
Gene_Type = c(Control = "#FF6B6B", Perturbation = "#4ECDC4"),
Cluster_Cells = colorRampPalette(c("white", "darkgreen"))(100),  # Green scale for cluster totals
Perturbation_N = colorRampPalette(c("white", "darkblue"))(100),  # Blue scale for perturbation counts
NonTargeting_Percent = colorRampPalette(c("white", "purple"))(100)
)
# PDF 1: Scaling explanation
pdf(file.path(pdf_dir, "1_scaling_explanation.pdf"), width = 10, height = 8)
plot.new()
text(0.5, 0.9, "Scaling Explanation", cex = 2, font = 2, adj = 0.5)
text(0.1, 0.8, "This analysis scales each perturbation relative to Non-Targeting controls:", adj = 0)
text(0.1, 0.7, "• Log2 Ratio = log2(Observed / Expected)", adj = 0)
text(0.1, 0.65, "  - Positive values (red) = enrichment in cluster", adj = 0)
text(0.1, 0.6, "  - Negative values (blue) = depletion in cluster", adj = 0)
text(0.1, 0.55, "  - Zero (white) = same as Non-Targeting distribution", adj = 0)
text(0.1, 0.45, "• Expected counts based on Non-Targeting distribution", adj = 0)
text(0.1, 0.4, "• Values > 1 or < -1 indicate 2-fold enrichment/depletion", adj = 0)
text(0.1, 0.3, "• Z-score shows standard deviations from expected", adj = 0)
text(0.1, 0.25, "• Green bars: Total cells per cluster", adj = 0)
text(0.1, 0.2, "• Blue bars: Cell count per perturbation (Non-Targeting excluded)", adj = 0)
text(0.1, 0.15, "This reveals perturbations affecting cell fate/clustering", adj = 0, font = 3)
dev.off()
# PDF 2: Full heatmap - Log2 ratio scaled
pdf(file.path(pdf_dir, "2_full_heatmap_log2_ratio_scaled.pdf"), width = 20, height = 40)
pheatmap(scaled_matrix_ratio,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_rownames = TRUE,
show_colnames = TRUE,
color = colorRampPalette(c("#313695", "#4575B4", "#74ADD1",
"#ABD9E9", "#E0F3F8", "#FFFFBF",
"#FEE090", "#FDAE61", "#F46D43",
"#D73027", "#A50026"))(100),
breaks = seq(-3, 3, length.out = 101),
display_numbers = FALSE,
annotation_row = row_annotation,
annotation_col = col_annotation,
annotation_colors = ann_colors,
main = paste0("CRISPRi Perturbseq (", dataset_name, " - ", cluster_type, " - ", subset_name, "): Log2(Observed/Expected) vs Non-Targeting Distribution"),
fontsize = 8,
fontsize_row = 4,
fontsize_col = 10,
cellwidth = 15,
cellheight = 3,
border_color = NA,
angle_col = 45,
legend_title = "Log2(O/E)")
dev.off()
# PDF 3: Full heatmap - Z-score scaled (INCREASED HEIGHT + CELL COUNT ANNOTATION)
pdf(file.path(pdf_dir, "3_full_heatmap_zscore_scaled.pdf"), width = 20, height = 50)
pheatmap(scaled_matrix_zscore,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_rownames = TRUE,
show_colnames = TRUE,
color = colorRampPalette(c("#313695", "#4575B4", "#74ADD1",
"#ABD9E9", "#E0F3F8", "#FFFFBF",
"#FEE090", "#FDAE61", "#F46D43",
"#D73027", "#A50026"))(100),
breaks = seq(-5, 5, length.out = 101),
display_numbers = FALSE,
annotation_row = row_annotation,
annotation_col = col_annotation,
annotation_colors = ann_colors,
main = paste0("CRISPRi Perturbseq (", dataset_name, " - ", cluster_type, " - ", subset_name, "): Z-score vs Expected (Non-Targeting) Distribution"),
fontsize = 8,
fontsize_row = 4,
fontsize_col = 10,
cellwidth = 15,
cellheight = 3,
border_color = NA,
angle_col = 45,
legend_title = "Z-score",
annotation_legend = TRUE,
annotation_names_row = TRUE,
annotation_names_col = TRUE)
dev.off()
# PDF 4: Filtered significant deviations
significant_perturbations <- rownames(scaled_matrix_ratio)[
apply(abs(scaled_matrix_ratio), 1, max) > 1
]
if(!"Non-Targeting" %in% significant_perturbations) {
significant_perturbations <- c("Non-Targeting", significant_perturbations)
}
# Create Plot 4 regardless of significant perturbations
pdf(file.path(pdf_dir, "4_filtered_significant_deviations.pdf"), width = 15, height = max(20, length(significant_perturbations) * 0.4))
if(length(significant_perturbations) > 1) {
print(paste("Found", length(significant_perturbations), "significant perturbations for plot 4"))
filtered_matrix_ratio <- scaled_matrix_ratio[significant_perturbations, ]
filtered_row_annotation <- row_annotation[significant_perturbations, , drop = FALSE]
tryCatch({
pheatmap(filtered_matrix_ratio,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_rownames = TRUE,
show_colnames = TRUE,
color = colorRampPalette(c("#313695", "#4575B4", "#74ADD1",
"#ABD9E9", "#E0F3F8", "#FFFFBF",
"#FEE090", "#FDAE61", "#F46D43",
"#D73027", "#A50026"))(100),
breaks = seq(-3, 3, length.out = 101),
display_numbers = TRUE,
number_format = "%.1f",
number_color = "black",
fontsize_number = 6,
annotation_row = filtered_row_annotation,
annotation_col = col_annotation,
annotation_colors = ann_colors,
main = paste0("CRISPRi Perturbseq (", dataset_name, " - ", cluster_type, "): Perturbations with Significant Cluster Enrichment/Depletion"),
fontsize = 10,
cellwidth = 25,
cellheight = 12,
border_color = "grey80",
angle_col = 45)
}, error = function(e) {
print(paste("Error creating heatmap:", e$message))
plot.new()
text(0.5, 0.5, paste("Error creating heatmap:\n", e$message), cex = 1, adj = 0.5)
})
} else {
print("No significant perturbations found - creating placeholder")
plot.new()
text(0.5, 0.5, "No significant perturbations found", cex = 2, adj = 0.5)
}
dev.off()
# Create enrichment summary
enrichment_summary <- data.frame()
for(i in 1:nrow(scaled_matrix_ratio)) {
gene <- rownames(scaled_matrix_ratio)[i]
enriched_clusters <- colnames(scaled_matrix_ratio)[scaled_matrix_ratio[i, ] > 1]
depleted_clusters <- colnames(scaled_matrix_ratio)[scaled_matrix_ratio[i, ] < -1]
if(length(enriched_clusters) > 0 | length(depleted_clusters) > 0) {
enrichment_summary <- rbind(enrichment_summary,
data.frame(
Gene = gene,
Enriched_Clusters = paste(enriched_clusters, collapse = ", "),
Depleted_Clusters = paste(depleted_clusters, collapse = ", "),
Max_Enrichment = max(scaled_matrix_ratio[i, ]),
Max_Depletion = min(scaled_matrix_ratio[i, ])
))
}
}
if(nrow(enrichment_summary) > 0) {
enrichment_summary$Max_Abs_Deviation <- pmax(abs(enrichment_summary$Max_Enrichment),
abs(enrichment_summary$Max_Depletion))
enrichment_summary <- enrichment_summary[order(enrichment_summary$Max_Abs_Deviation,
decreasing = TRUE), ]
write.csv(enrichment_summary,
file.path(pdf_dir, "perturbation_enrichment_summary.csv"),
row.names = FALSE)
}
# PDF 5: Top perturbations summary - FOCUSED ON 3 MAIN CLUSTERS
if(nrow(enrichment_summary) > 0) {
# Identify the 3 clusters with most cells
cluster_totals <- colSums(full_heatmap_matrix)
top_3_clusters <- names(sort(cluster_totals, decreasing = TRUE))[1:min(3, length(cluster_totals))]
pdf(file.path(pdf_dir, "5_top_perturbations_summary.pdf"), width = 10, height = 10)
# Get top 30 perturbations
top_perturbations <- head(enrichment_summary$Gene[enrichment_summary$Gene != "Non-Targeting"], 30)
if(!"Non-Targeting" %in% top_perturbations) {
top_perturbations <- c("Non-Targeting", top_perturbations)
}
# Create subset matrix with only top 3 clusters
summary_matrix <- scaled_matrix_ratio[top_perturbations, top_3_clusters, drop = FALSE]
# Create annotation showing cell counts for these perturbations (exclude Non-Targeting from scale)
top_perturbation_counts <- rowSums(full_heatmap_matrix[top_perturbations, ])
top_perturbation_counts_for_scale <- top_perturbation_counts
top_perturbation_counts_for_scale[names(top_perturbation_counts_for_scale) == "Non-Targeting"] <- NA
top_perturbation_annotation <- data.frame(
N_Cells = top_perturbation_counts_for_scale,  # Non-Targeting = NA for proper scaling
row.names = top_perturbations
)
ann_colors_top <- list(
N_Cells = colorRampPalette(c("white", "darkblue"))(100)
)
pheatmap(summary_matrix,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
color = colorRampPalette(c("#313695", "#4575B4", "#74ADD1",
"#ABD9E9", "#E0F3F8", "#FFFFBF",
"#FEE090", "#FDAE61", "#F46D43",
"#D73027", "#A50026"))(100),
breaks = seq(-3, 3, length.out = 101),
display_numbers = TRUE,
number_format = "%.1f",
number_color = "black",
fontsize_number = 8,
annotation_row = top_perturbation_annotation,
annotation_colors = ann_colors_top,
main = paste0("Top 30 Perturbations in 3 Main Clusters (", dataset_name, " - ", cluster_type, ")"),
fontsize = 10,
cellwidth = 40,
cellheight = 15,
border_color = "grey80",
angle_col = 45,
annotation_legend = TRUE,
annotation_names_row = TRUE)
dev.off()
} else {
pdf(file.path(pdf_dir, "5_top_perturbations_summary.pdf"), width = 10, height = 8)
plot.new()
text(0.5, 0.5, "No enrichment data available", cex = 2, adj = 0.5)
dev.off()
}
# SKIP PDF 6 - PD genes plot removed per user request
# PDF 7: Bubble plot for visualization - WITH HIERARCHICAL CLUSTERING
heatmap_df <- melt(scaled_matrix_ratio)
colnames(heatmap_df) <- c("Gene", "Cluster", "Log2_Ratio")
heatmap_df$Gene_Type <- ifelse(heatmap_df$Gene == "Non-Targeting", "Control", "Perturbation")
heatmap_df$Significant <- abs(heatmap_df$Log2_Ratio) > 1
# Filter for significant effects only
significant_df <- heatmap_df[heatmap_df$Significant, ]
if(nrow(significant_df) > 0) {
# Perform hierarchical clustering on genes based on their effect patterns
genes_with_sig_effects <- unique(significant_df$Gene)
gene_effect_matrix <- scaled_matrix_ratio[genes_with_sig_effects, ]
# Hierarchical clustering
if(length(genes_with_sig_effects) > 1) {
gene_dist <- dist(gene_effect_matrix)
gene_clust <- hclust(gene_dist, method = "complete")
gene_order <- genes_with_sig_effects[gene_clust$order]
} else {
gene_order <- genes_with_sig_effects
}
# Reorder factor levels for genes
significant_df$Gene <- factor(significant_df$Gene, levels = gene_order)
# Order clusters numerically - handle non-numeric cluster names safely
unique_clusters <- unique(significant_df$Cluster)
# Try to convert to numeric, but handle cases where cluster names aren't numeric
numeric_clusters <- suppressWarnings(as.numeric(as.character(unique_clusters)))
if(any(is.na(numeric_clusters))) {
# If some clusters can't be converted to numeric, sort alphabetically
cluster_order <- sort(as.character(unique_clusters))
} else {
# If all can be converted, sort numerically
cluster_order <- as.character(sort(numeric_clusters))
}
significant_df$Cluster <- factor(significant_df$Cluster, levels = cluster_order)
pdf(file.path(pdf_dir, "7_bubble_plot_significant_effects.pdf"), width = 14, height = max(20, length(genes_with_sig_effects) * 0.3))
p <- ggplot(significant_df, aes(x = Cluster, y = Gene, size = abs(Log2_Ratio), color = Log2_Ratio)) +
geom_point(alpha = 0.8) +
scale_size_continuous(range = c(2, 10), name = "|Log2 Ratio|") +
scale_color_gradient2(low = "#313695", mid = "white", high = "#A50026",
midpoint = 0, name = "Log2(O/E)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
panel.grid.major = element_line(color = "grey90")) +
labs(title = paste0("Significant Cluster-Specific Perturbation Effects (", dataset_name, " - ", cluster_type, ")"),
subtitle = "Showing only |Log2 Ratio| > 1; Genes ordered by hierarchical clustering",
x = "Cluster",
y = "Gene")
print(p)
dev.off()
} else {
pdf(file.path(pdf_dir, "7_bubble_plot_significant_effects.pdf"), width = 10, height = 8)
plot.new()
text(0.5, 0.5, "No significant effects to plot", cex = 2, adj = 0.5)
dev.off()
}
# PDF 8: Summary statistics table
summary_stats <- data.frame(
Metric = c("Total Cells",
"Total Perturbations",
"Total Clusters",
"Non-Targeting Cells",
"Percent Non-Targeting",
"Perturbations with Significant Effects",
"Percent with Significant Effects",
"Most Enriched Perturbation",
"Most Depleted Perturbation"),
Value = c(
format(sum(full_heatmap_matrix), big.mark = ","),
nrow(full_heatmap_matrix),
ncol(full_heatmap_matrix),
format(sum(full_heatmap_matrix["Non-Targeting", ]), big.mark = ","),
paste0(round(100 * sum(full_heatmap_matrix["Non-Targeting", ]) / sum(full_heatmap_matrix), 2), "%"),
sum(apply(abs(scaled_matrix_ratio), 1, max) > 1),
paste0(round(100 * sum(apply(abs(scaled_matrix_ratio), 1, max) > 1) / nrow(scaled_matrix_ratio), 1), "%"),
ifelse(nrow(enrichment_summary) > 0, enrichment_summary$Gene[1], "N/A"),
ifelse(nrow(enrichment_summary) > 0, enrichment_summary$Gene[which.min(enrichment_summary$Max_Depletion)], "N/A")
)
)
pdf(file.path(pdf_dir, "8_summary_statistics.pdf"), width = 8, height = 6)
# Create a nice table visualization
plot.new()
text(0.5, 0.95, paste0("CRISPRi Perturbseq Analysis Summary\n", dataset_name, " - ", cluster_type, " clusters"),
cex = 1.5, font = 2, adj = 0.5)
# Draw table
y_positions <- seq(0.85, 0.15, length.out = nrow(summary_stats))
for(i in 1:nrow(summary_stats)) {
text(0.1, y_positions[i], summary_stats$Metric[i], adj = 0, font = 2)
text(0.6, y_positions[i], summary_stats$Value[i], adj = 0)
}
# Add a box around the table
rect(0.05, 0.1, 0.95, 0.9)
dev.off()
# Print summary to console
print(paste("\nAnalysis complete for", dataset_name, "-", cluster_type, "-", subset_name))
print(paste("Files saved to:", pdf_dir))
}  # End subset loop
}  # End cluster_type loop
remove(x2)
gc()
}
print("\n===== ALL ANALYSES COMPLETE =====")
print("Check the following directories for results:")
print("- GWAS_library_only/coarse_clusters/")
print("- GWAS_library_only/fine_clusters/")
print("- FPD_library_only/coarse_clusters/")
print("- FPD_library_only/fine_clusters/")
print("- both_gRNA_libraries/coarse_clusters/")
print("- both_gRNA_libraries/fine_clusters/")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='jessedunnack',
token='F93A4CF2EB1A71BB1341EE4FC7CD0F83',
secret='/6O99Ai2hLGRgqFT1VR8o4s5hm+wVGHSpxjQUVvG')
setwd("../../../final/update_analysis_scripts/shiny_app/")
setwd("../")
shiny::runApp()
setwd("./shiny_app/")
shiny::runApp()
getwd()
setwd("../iSCORE-PDecipher/")
devtools::install_github("yourusername/iSCORE-PDecipher")
devtools::install_github("jessedunnack/iSCORE-PDecipher")
# Install devtools if you haven't already
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
# Install iSCORE-PDecipher
devtools::install_github("jessedunnack/iSCORE-PDecipher")
# Install devtools if you haven't already
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
# Install iSCORE-PDecipher
devtools::install_github("jessedunnack/iSCORE-PDecipher")
library(iSCORE.PDecipher)
?launch_iscore_app
library(iSCORE.PDecipher)
??launch_iscore_app
launch_iscore_app()
warnings()
library(iSCORE.PDecipher)
remove.packages("iSCORE.PDecipher")
# Install the updated version with proper NAMESPACE
devtools::install_github("jessedunnack/iSCORE-PDecipher")
getwd()
